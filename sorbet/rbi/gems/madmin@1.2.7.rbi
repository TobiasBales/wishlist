# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `madmin` gem.
# Please instead update this file by running `bin/tapioca gem madmin`.

# based on Administrate Search: https://github.com/thoughtbot/administrate/blob/main/lib/administrate/search.rb
#
# source://madmin//lib/madmin/engine.rb#1
module Madmin
  class << self
    # source://railties/7.0.4.1/lib/rails/engine.rb#405
    def railtie_helpers_paths; end

    # source://railties/7.0.4.1/lib/rails/engine.rb#394
    def railtie_namespace; end

    # source://railties/7.0.4.1/lib/rails/engine.rb#409
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://madmin//lib/madmin.rb#49
    def reset_resources!; end

    # source://madmin//lib/madmin.rb#41
    def resource_by_name(name); end

    # source://madmin//lib/madmin.rb#37
    def resource_for(object); end

    # source://madmin//lib/madmin.rb#53
    def resource_names; end

    # source://madmin//lib/madmin.rb#45
    def resources; end

    # source://railties/7.0.4.1/lib/rails/engine.rb#397
    def table_name_prefix; end

    # source://railties/7.0.4.1/lib/rails/engine.rb#401
    def use_relative_model_naming?; end
  end
end

class Madmin::ApplicationController < ::Madmin::BaseController
  def authenticate_admin_user; end

  private

  # source://actionview/7.0.4.1/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.4.1/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.4.1/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module Madmin::ApplicationController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::Pagy::UrlHelpers
  include ::Pagy::Frontend
  include ::Madmin::ApplicationHelper
end

module Madmin::ApplicationHelper
  include ::Pagy::UrlHelpers
  include ::Pagy::Frontend

  def clear_search_params; end
  def npm_rails_version; end
end

class Madmin::BaseController < ::ActionController::Base
  include ::Pagy::Backend

  private

  # source://actionview/7.0.4.1/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.4.1/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.4.1/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

class Madmin::DashboardController < ::Madmin::ApplicationController
  def show; end

  private

  # source://actionview/7.0.4.1/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://actionpack/7.0.4.1/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# source://madmin//lib/madmin/engine.rb#2
class Madmin::Engine < ::Rails::Engine; end

# source://madmin//lib/madmin/field.rb#2
class Madmin::Field
  # @return [Field] a new instance of Field
  #
  # source://madmin//lib/madmin/field.rb#9
  def initialize(attribute_name:, model:, resource:, **options); end

  # Returns the value of attribute attribute_name.
  #
  # source://madmin//lib/madmin/field.rb#3
  def attribute_name; end

  # Returns the value of attribute model.
  #
  # source://madmin//lib/madmin/field.rb#3
  def model; end

  # Returns the value of attribute options.
  #
  # source://madmin//lib/madmin/field.rb#3
  def options; end

  # @return [Boolean]
  #
  # source://madmin//lib/madmin/field.rb#37
  def required?; end

  # Returns the value of attribute resource.
  #
  # source://madmin//lib/madmin/field.rb#3
  def resource; end

  # @return [Boolean]
  #
  # source://madmin//lib/madmin/field.rb#41
  def searchable?; end

  # source://madmin//lib/madmin/field.rb#28
  def to_param; end

  # source://madmin//lib/madmin/field.rb#20
  def to_partial_path(name); end

  # source://madmin//lib/madmin/field.rb#16
  def value(record); end

  # Used for checking visibility of attribute on an view
  #
  # @return [Boolean]
  #
  # source://madmin//lib/madmin/field.rb#33
  def visible?(action, default: T.unsafe(nil)); end

  class << self
    # source://madmin//lib/madmin/field.rb#5
    def field_type; end
  end
end

# source://madmin//lib/madmin.rb#12
module Madmin::Fields; end

# source://madmin//lib/madmin/fields/attachment.rb#3
class Madmin::Fields::Attachment < ::Madmin::Field; end

# source://madmin//lib/madmin/fields/attachments.rb#3
class Madmin::Fields::Attachments < ::Madmin::Field
  # source://madmin//lib/madmin/fields/attachments.rb#4
  def to_param; end
end

# source://madmin//lib/madmin/fields/belongs_to.rb#3
class Madmin::Fields::BelongsTo < ::Madmin::Field
  # source://madmin//lib/madmin/fields/belongs_to.rb#17
  def index_path; end

  # source://madmin//lib/madmin/fields/belongs_to.rb#4
  def options_for_select(record); end

  # source://madmin//lib/madmin/fields/belongs_to.rb#13
  def to_param; end
end

# source://madmin//lib/madmin/fields/boolean.rb#3
class Madmin::Fields::Boolean < ::Madmin::Field; end

# source://madmin//lib/madmin/fields/date.rb#3
class Madmin::Fields::Date < ::Madmin::Field; end

# source://madmin//lib/madmin/fields/date_time.rb#3
class Madmin::Fields::DateTime < ::Madmin::Field; end

# source://madmin//lib/madmin/fields/decimal.rb#3
class Madmin::Fields::Decimal < ::Madmin::Field; end

# source://madmin//lib/madmin/fields/enum.rb#3
class Madmin::Fields::Enum < ::Madmin::Field
  # source://madmin//lib/madmin/fields/enum.rb#4
  def options_for_select(record); end
end

# source://madmin//lib/madmin/fields/file.rb#3
class Madmin::Fields::File < ::Madmin::Field
  # @return [Boolean]
  #
  # source://madmin//lib/madmin/fields/file.rb#4
  def searchable?; end
end

# source://madmin//lib/madmin/fields/float.rb#3
class Madmin::Fields::Float < ::Madmin::Field; end

# source://madmin//lib/madmin/fields/has_many.rb#3
class Madmin::Fields::HasMany < ::Madmin::Field
  # source://madmin//lib/madmin/fields/has_many.rb#18
  def index_path; end

  # source://madmin//lib/madmin/fields/has_many.rb#4
  def options_for_select(record); end

  # source://madmin//lib/madmin/fields/has_many.rb#14
  def to_param; end
end

# source://madmin//lib/madmin/fields/has_one.rb#3
class Madmin::Fields::HasOne < ::Madmin::Field; end

# source://madmin//lib/madmin/fields/integer.rb#3
class Madmin::Fields::Integer < ::Madmin::Field; end

# source://madmin//lib/madmin/fields/json.rb#3
class Madmin::Fields::Json < ::Madmin::Field; end

# source://madmin//lib/madmin/fields/nested_has_many.rb#3
class Madmin::Fields::NestedHasMany < ::Madmin::Field
  # source://madmin//lib/madmin/fields/nested_has_many.rb#5
  def nested_attributes; end

  # source://madmin//lib/madmin/fields/nested_has_many.rb#9
  def resource; end

  # source://madmin//lib/madmin/fields/nested_has_many.rb#25
  def to_model; end

  # source://madmin//lib/madmin/fields/nested_has_many.rb#13
  def to_param; end

  # source://madmin//lib/madmin/fields/nested_has_many.rb#17
  def to_partial_path(name); end

  private

  # source://madmin//lib/madmin/fields/nested_has_many.rb#31
  def permitted_fields; end

  # source://madmin//lib/madmin/fields/nested_has_many.rb#35
  def skipped_fields; end
end

# source://madmin//lib/madmin/fields/nested_has_many.rb#4
Madmin::Fields::NestedHasMany::DEFAULT_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://madmin//lib/madmin/fields/password.rb#3
class Madmin::Fields::Password < ::Madmin::Field; end

# source://madmin//lib/madmin/fields/polymorphic.rb#3
class Madmin::Fields::Polymorphic < ::Madmin::Field
  # source://madmin//lib/madmin/fields/polymorphic.rb#4
  def options_for_select(record); end

  # source://madmin//lib/madmin/fields/polymorphic.rb#12
  def to_param; end
end

# source://madmin//lib/madmin/fields/rich_text.rb#3
class Madmin::Fields::RichText < ::Madmin::Field; end

# source://madmin//lib/madmin/fields/string.rb#3
class Madmin::Fields::String < ::Madmin::Field
  # @return [Boolean]
  #
  # source://madmin//lib/madmin/fields/string.rb#4
  def searchable?; end
end

# source://madmin//lib/madmin/fields/text.rb#3
class Madmin::Fields::Text < ::Madmin::Field
  # @return [Boolean]
  #
  # source://madmin//lib/madmin/fields/text.rb#4
  def searchable?; end
end

# source://madmin//lib/madmin/fields/time.rb#3
class Madmin::Fields::Time < ::Madmin::Field; end

# source://madmin//lib/madmin/generator_helpers.rb#2
module Madmin::GeneratorHelpers
  # source://madmin//lib/madmin/generator_helpers.rb#5
  def call_generator(generator, *args); end

  # Method copied from Rails 6.1 master
  #
  # source://madmin//lib/madmin/generator_helpers.rb#32
  def optimize_indentation(value, amount = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://madmin//lib/madmin/generator_helpers.rb#13
  def rails6_1_and_up?; end

  # Method copied from Rails 6.1 master
  #
  # source://madmin//lib/madmin/generator_helpers.rb#18
  def route(routing_code, namespace: T.unsafe(nil), sentinel: T.unsafe(nil), indentation: T.unsafe(nil), file: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://madmin//lib/madmin/generator_helpers.rb#9
  def route_namespace_exists?; end

  private

  # source://madmin//lib/madmin/generator_helpers.rb#47
  def default_routes_file; end

  # source://madmin//lib/madmin/generator_helpers.rb#43
  def default_sentinel(file); end

  # source://madmin//lib/madmin/generator_helpers.rb#51
  def generator_options; end

  # @return [Boolean]
  #
  # source://madmin//lib/madmin/generator_helpers.rb#39
  def separated_routes_file?; end
end

# source://madmin//lib/madmin/generator_helpers.rb#3
Madmin::GeneratorHelpers::ROUTES_FILE = T.let(T.unsafe(nil), Hash)

module Madmin::NavHelper
  def nav_link_to(name = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
end

# source://madmin//lib/madmin/resource.rb#2
class Madmin::Resource
  # source://madmin//lib/madmin/resource.rb#3
  def attributes; end

  # source://madmin//lib/madmin/resource.rb#3
  def attributes=(_arg0); end

  # source://madmin//lib/madmin/resource.rb#3
  def attributes?; end

  # source://madmin//lib/madmin/resource.rb#4
  def scopes; end

  # source://madmin//lib/madmin/resource.rb#4
  def scopes=(_arg0); end

  # source://madmin//lib/madmin/resource.rb#4
  def scopes?; end

  class << self
    # source://madmin//lib/madmin/resource.rb#33
    def attribute(name, type = T.unsafe(nil), **options); end

    # source://madmin//lib/madmin/resource.rb#3
    def attributes; end

    # source://madmin//lib/madmin/resource.rb#3
    def attributes=(value); end

    # source://madmin//lib/madmin/resource.rb#3
    def attributes?; end

    # source://madmin//lib/madmin/resource.rb#95
    def display_name(record); end

    # source://madmin//lib/madmin/resource.rb#83
    def edit_path(record); end

    # @return [Boolean]
    #
    # source://madmin//lib/madmin/resource.rb#99
    def friendly_model?; end

    # source://madmin//lib/madmin/resource.rb#57
    def friendly_name; end

    # source://madmin//lib/madmin/resource.rb#29
    def get_attribute(name); end

    # source://madmin//lib/madmin/resource.rb#71
    def index_path(options = T.unsafe(nil)); end

    # @private
    #
    # source://madmin//lib/madmin/resource.rb#7
    def inherited(base); end

    # source://madmin//lib/madmin/resource.rb#13
    def model; end

    # source://madmin//lib/madmin/resource.rb#17
    def model_find(id); end

    # source://madmin//lib/madmin/resource.rb#21
    def model_name; end

    # source://madmin//lib/madmin/resource.rb#75
    def new_path; end

    # source://madmin//lib/madmin/resource.rb#87
    def param_key; end

    # source://madmin//lib/madmin/resource.rb#91
    def permitted_params; end

    # Support for isolated namespaces
    # Finds parent module class to include in polymorphic urls
    #
    # source://madmin//lib/madmin/resource.rb#63
    def route_namespace; end

    # source://madmin//lib/madmin/resource.rb#25
    def scope(name); end

    # source://madmin//lib/madmin/resource.rb#4
    def scopes; end

    # source://madmin//lib/madmin/resource.rb#4
    def scopes=(value); end

    # source://madmin//lib/madmin/resource.rb#4
    def scopes?; end

    # source://madmin//lib/madmin/resource.rb#107
    def searchable_attributes; end

    # source://madmin//lib/madmin/resource.rb#79
    def show_path(record); end

    # source://madmin//lib/madmin/resource.rb#103
    def sortable_columns; end

    private

    # source://madmin//lib/madmin/resource.rb#113
    def field_for_type(type); end

    # source://madmin//lib/madmin/resource.rb#176
    def infer_type(name); end

    # source://madmin//lib/madmin/resource.rb#221
    def model_store_accessors; end

    # source://madmin//lib/madmin/resource.rb#205
    def type_for_association(association); end

    # source://madmin//lib/madmin/resource.rb#217
    def url_helpers; end
  end
end

# source://madmin//lib/madmin/resource_builder.rb#2
class Madmin::ResourceBuilder
  # @return [ResourceBuilder] a new instance of ResourceBuilder
  #
  # source://madmin//lib/madmin/resource_builder.rb#5
  def initialize(model); end

  # source://madmin//lib/madmin/resource_builder.rb#9
  def associations; end

  # source://madmin//lib/madmin/resource_builder.rb#20
  def attributes; end

  # Returns the value of attribute model.
  #
  # source://madmin//lib/madmin/resource_builder.rb#3
  def model; end

  # source://madmin//lib/madmin/resource_builder.rb#52
  def redundant_attributes; end

  # source://madmin//lib/madmin/resource_builder.rb#24
  def store_accessors; end

  # source://madmin//lib/madmin/resource_builder.rb#28
  def virtual_attributes; end
end

class Madmin::ResourceController < ::Madmin::ApplicationController
  include ::Madmin::SortHelper

  def create; end
  def destroy; end
  def edit; end
  def index; end
  def new; end
  def show; end
  def update; end

  private

  # source://actionview/7.0.4.1/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def change_polymorphic(data); end
  def resource; end
  def resource_name; end
  def resource_params; end
  def scoped_resources; end
  def search_term; end
  def set_record; end
  def valid_scope; end

  class << self
    # source://activesupport/7.0.4.1/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.4.1/lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack/7.0.4.1/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module Madmin::ResourceController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::Pagy::UrlHelpers
  include ::Pagy::Frontend
  include ::Madmin::ApplicationHelper
  include ::Madmin::ApplicationController::HelperMethods

  def resource(*args, **_arg1, &block); end
end

# source://madmin//lib/madmin/search.rb#4
class Madmin::Search
  # @return [Search] a new instance of Search
  #
  # source://madmin//lib/madmin/search.rb#7
  def initialize(scoped_resource, resource, term); end

  # Returns the value of attribute query.
  #
  # source://madmin//lib/madmin/search.rb#5
  def query; end

  # source://madmin//lib/madmin/search.rb#13
  def run; end

  private

  # source://madmin//lib/madmin/search.rb#56
  def column_to_query(attr); end

  # source://madmin//lib/madmin/search.rb#52
  def query_table_name(attr); end

  # source://madmin//lib/madmin/search.rb#27
  def query_template; end

  # source://madmin//lib/madmin/search.rb#41
  def query_values; end

  # source://madmin//lib/madmin/search.rb#48
  def search_attributes; end

  # source://madmin//lib/madmin/search.rb#23
  def search_results(resources); end

  # source://madmin//lib/madmin/search.rb#37
  def searchable_fields(attr); end
end

module Madmin::SortHelper
  def default_sort_column; end
  def default_sort_direction; end
  def sort_column; end
  def sort_direction; end
  def sortable(column, title, options = T.unsafe(nil)); end
end
